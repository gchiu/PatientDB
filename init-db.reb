Rebol [
    file: %init-db.reb
    purpose: {clears existing tables if present and then loads with some initial data ready for importing}
    date: 3-Dec-2021
    author: "Graham Chiu"
    version: 0.0.2
    notes: {
        3.12.2021 first working version
    }
]

if any [blank? system.script.args empty? system.script.args] [
    ; interactive mode
    interactive?: true
] else [
    dump system.script.args
    interactive?: not equal? first system.script.args "/yes"
]

import %sql.reb

sql-silent-execute: specialize :odbc-execute [; https://forum.rebol.info/t/1234
    statement: port
    verbose: if false [#] else [null]
]

find-table: func [tablename [text!] /silent] [
    if silent [
        sql-silent-execute {SELECT RDB$RELATION_NAME FROM RDB$RELATIONS WHERE (RDB$SYSTEM_FLAG <> 1 OR RDB$SYSTEM_FLAG IS NULL) AND RDB$VIEW_BLR IS NULL ORDER BY RDB$RELATION_NAME;}
    ] else [
        sql-execute {SELECT RDB$RELATION_NAME FROM RDB$RELATIONS WHERE (RDB$SYSTEM_FLAG <> 1 OR RDB$SYSTEM_FLAG IS NULL) AND RDB$VIEW_BLR IS NULL ORDER BY RDB$RELATION_NAME;}
    ]
    for-each record copy port [
        if tablename = trim record.1 [
            print ["found" tablename]
            return true
        ]
    ]
    return false
]

drop-table: function [tablename [text!]] [
    sql-execute [DROP TABLE ^tablename]  ; note: can't use @table
]

drop-existing-table: func [tablename [text!]] [
    if find-table tablename [
        drop-table tablename
    ]
]

if interactive? [
    if equal? "Yes" ask ["Delete all the data from patients database? (Yes/No) " text!] [
        print "start deleting"
        for-each table [
            patients
            nhilookup
            files
            clinicians
            fps
            letters
            medications
            diagnoses
            gpcentre
            vaccinations
            notifications
        ][
            ; drop-existing-table form table
            sys.util.rescue [  ; !!! ODBC-EXECUTE errors not definitional ATM
                sql-execute [DROP TABLE ^table]  ; note: can't use @table
            ]
        ]
        print "Finished table deletes"
    ] else [
        print "tables unchanged"
        quit
    ]
]

; check for successful deletion
for-each table ['patients 'nhilookup 'files 'clinicians 'fps 'letters 'medications 'diagnoses 'gpcentre 'vaccinations 'notifications] [
    if find-table/silent form table [
        print ["table" table "exists!"]
    ] else [
        print ["table" table "deleted!"]
    ]
]

; sql-execute {commit}
; insert port {commit}

; we are not going to use the NHI as the id but a unique integer
; NHI format is 3 alpha 4 integer
; insert port {create table nhilookup ( id integer generated by default as identity primary key, "NHI" CHAR(7) UNIQUE NOT NULL)}

if error? e: sys.util.rescue [
    sql-execute {select count(*) from nhilookup}  ; !!! How to dialect COUNT(*)?
    print "should give error here!"
    probe copy port
] [
    probe e
    print "this is correct, there should not be a nhilookup table now"
]

; !!! How to dialect CHAR(7)?
;
sql-execute {create table nhilookup ( id integer generated by default as identity primary key, "NHI" CHAR(7) UNIQUE NOT NULL)}

; dummy data
;insert port {insert into nhilookup (nhi) values ('MZK1240')}
;insert port {insert into nhilookup (nhi) values ('abc1234')}
;insert port {insert into nhilookup (nhi) values ('efg1923')}

insert port
{create table clinicians ( id integer generated by default as identity primary key, surname varchar(128), fname varchar(128), clintype int, registration int)}

; real rheumatology data
cns: 2 dr: 1
staff: reduce [
    "Chiu" "Graham" dr
    "Elasir" "Haitham" dr
    "Porten" "Lauren" cns
    "Sawyers" "Stephen" dr
    "Hawke" "Sonia" cns
]

for-each [surname firstname t] staff [
    cmd: unspaced []
    sql-execute [
        INSERT INTO clinicians (
            surname, fname, clintype
        ) VALUES (
            @surname, @firstname, @t
        )
    ]
]

unset 'cns
unset 'dr
unset 'staff

; add consults
; id int, clinician id, date timestamp, text blob_e, checksum
insert port
{
        create table letters (
            id integer generated by default as identity primary key,
            clinicians integer,
            nhi integer,
            cdate date,
            dictation blob sub_type text,
            checksum char(43),
            unique(checksum)
        )
    }

; add patients
insert port
{
    create table patients (
            id integer generated by default as identity primary key,
            created timestamp default current_timestamp,
            nhi integer,
            clinicians integer,
            dob date,
            gender char(1),
            pronoun char(4),
            surname varchar(128),
            fname varchar(128),
            sname varchar(128),
            street varchar(256),
            street2 varchar(256),
            town varchar(256),
            areacode varchar(4),
            email varchar(128),
            phone varchar(15),
            mobile varchar(15),
            gp integer,
            gpcentre integer,
            gpname varchar(128),
            gpcentname varchar(128),
            deceased boolean default false,
            discharged boolean default false
        )
    }

; vaccination database - where record the vaccines given

insert port
{
    create table vaccinations (
            id integer generated by default as identity primary key,
            created timestamp default current_timestamp,
            nhi integer,
            vaccineid integer,
            outcome varchar(128),
            vaxdate date
        )
    }


; files - filenames, should be unique; nhi-doc-yyyymmdd.txt
insert port
{
    create table files (
            id integer generated by default as identity primary key,
            done BOOLEAN default FALSE,
            filename varchar(32),
            UNIQUE (filename)
        )
    }

insert port
{
    create table notifications (
            id integer generated by default as identity primary key,
            created timestamp default current_timestamp,
            nhi integer,
            ndate timestamp,
            clinicians integer,
            mode integer,
            notes varchar(128)
        )
    }

;' general practitioners and nurse practitioners
insert port
{
    create table fps (
            id integer generated by default as identity primary key,
            title char(4),
            fname varchar(128),
            surname varchar(128),
            email varchar(128),
            registration integer
        )
    }

insert port {
        create table diagnoses (
            id integer generated by default as identity primary key,
            created timestamp default current_timestamp,
            letter date,
            nhi integer,
            diagnosis varchar(256),
            detail varchar(512),
            icd10am char(7)
        )
    }

insert port {
        create table medications (
            id integer generated by default as identity primary key,
            created timestamp default current_timestamp,
            letter date,
            nhi integer,
            startdate date,
            finishdate date,
            name varchar(128),
            dosing varchar(128),
            outcome varchar(256),
            active char(1)
        )
    }

insert port {
        create table gpcentre (
            id integer generated by default as identity primary key,
            centrename varchar(128),
            street varchar(128),
            street2 varchar(128),
            town varchar(128),
            city varchar(128),
            phone varchar(15),
            fax varchar(15),
            email varchar(128),
            edi varchar(128)
        )
    }



print "table init completed"
